#!/usr/bin/python

import os, sys ,time, thread,re
import optparse
import logging
from logging import debug,info

## Log file for the logparser internal operation, nothing to do with the
## input/output files
LOG_FILENAME = '/tmp/hal_ipu4_logparser.log'
logging.basicConfig(filename = LOG_FILENAME, level=logging.INFO,)


USAGE_HELP = """
    usage: %prog  -i LOG_FILE -o OUT_FILE
    Parses the a logcat file with IPU4 GUI traces enabled (level 4)

    The outcome of the parsing process will be the a file compatible with the
    graphical logviewer trace2pic

            """


class Trace2picParser():
    """
        Parser for the logcat generated by the Camera HAL IPU4
    """
    def __init__(self):

        self._data=[]

    # Public interface
    #
    def Run(self):
        self._log_fh = open (self.logFileName)
        if self._log_fh == None:
            debug("Error: VQA Parser: log file not found")
            raise IOError

        self.__Run()
        return

    def Print(self,out_file='/tmp/hal_ipu4.log'):
        """
            prints the results of the parse analysis into the file
        """
        out_fh = open(out_file,"w")

        for k in self._data:
            out_fh.write(k)

        out_fh.close()

    def SetLogFileName(self, log_file_name):
        self.logFileName = log_file_name


    ############################################################################
    # Private interface
    #
    def __Run(self):
        info ("log2Pic logcat Parser: parsing starting now: %s"%time.strftime("%a, %d %b %Y %H:%M:%S ", time.gmtime()))
        first = True

        for line in self._log_fh:
            mo = re.search(r' CAMGUILOG;(\d*);(.*)', line)
            if mo:
              if first:
                offset = float(mo.group(1))
                first = False
              ##print mo.group(1)+";"+mo.group(2)
              traceTime = float(mo.group(1)) - offset
              outTrace = "{:3.9f}".format(traceTime/1000000000.0) + ";"+mo.group(2)+"\n"
              self._data.append(outTrace)

################################################################################

def main(args):
    option_parser = optparse.OptionParser(usage=USAGE_HELP)

    option_parser.add_option('-i',
                             '--log-file',
                             dest='log_file_name',
                             metavar='LOG_FILE',
                             help='Logcat dump file')

    option_parser.add_option('-o',
                             '--output-file',
                             dest='out_name',
                             metavar='OUT_FILE',
                             help='file with the outcome of the parsing process \
                             The default is /tmp/hal_ipu4.log')


    info('---------------------------------------')
    options, args = option_parser.parse_args()

    if not options.log_file_name:
        print 'Please specify the log file name'
        option_parser.print_help()
        return 1


    logparser = Trace2picParser()
    logparser.SetLogFileName(options.log_file_name)

    logparser.Run()

    logparser.Print(out_file=options.out_name)


    return 0;

if __name__ == '__main__':

    sys.exit(main(sys.argv))
